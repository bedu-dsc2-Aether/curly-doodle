---
title: "Data Analysis Modulo 5"
format: html
---

Importar las librerias de python

```{python}
from ucimlrepo import fetch_ucirepo
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
```

Traer los datos del repositorio a un dataframe

```{python}
cdc_diabetes_health_indicators = fetch_ucirepo(id=891) 
```

Asignar los atributos y el target a un dataframe

```{python}
X = cdc_diabetes_health_indicators.data.features 
y = cdc_diabetes_health_indicators.data.targets 
```

Mostrar los metadatos disponibles

```{python}
print(cdc_diabetes_health_indicators.metadata) 
```

Mostrar información sobre las variables

```{python}
print(cdc_diabetes_health_indicators.variables) 
```

Mostrar los datos estadisticos de los atributos (features)

```{python}
X.describe()
```

Unir los atributos y los targets en un dataframe

```{python}
df = pd.concat([X,y],axis=1)
X = pd.concat([X,y],axis=1)
```

Se buscan los atributos que puedan tener una correlación

Primero la correlación positiva

```{python}
correlation_matrix = df.corr()
top_columns = correlation_matrix['Diabetes_binary'].sort_values(ascending=False).head(5).index
print(top_columns)
sns.heatmap(df[top_columns].corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()
```

Despues la correlación negativa

```{python}
correlation_matrix = df.corr()
top_columns_inverse = correlation_matrix['Diabetes_binary'].sort_values(ascending=True).head(4).index
top_columns_inverse = top_columns_inverse.append(pd.Index(['Diabetes_binary']))
print(top_columns_inverse)
sns.heatmap(df[top_columns_inverse].corr(), annot=True, cmap='coolwarm')
plt.title('Inverse Correlation Heatmap')
plt.show()
```

Filtrar el dataset `X` para que solo contenga datos donde el diagnostico de diabetes sea positivo

```{python}
X = X[X.Diabetes_binary==1]
```

Se continua con el proceso usando R

```{r}
library(reticulate)
hist(py$X$Age,
    breaks = 20,
    main = " Histograma de Edad",
    ylab = "Y",
    xlab = "X", 
    col = "blue")
```

Con base en la gráfica podemos decir que la variable edad tiene una distribución normal con una media aproximada a la categoría 11.

Por lo que queremos demostrar que las personas mayores a la media son propensas a diabetes.

------------------------------------------------------------------------

Hipotesis h0 = pacientes con diagnostico de diabetes tienen una edad mayor o igual a la categoría 11.

```{r}
x <- seq(-3, 3, length = 100) * sd(py$X$Age) + mean(py$X$Age)
y <- dnorm(x, mean = mean(py$X$Age), sd = sd(py$X$Age))

plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == mean(py$X$Age), " y ", sigma == 1)))
polygon(c(11, x[x>=11], max(x)), c(0, y[x>=11], 0), col="blue")
```

```{r}
media <- mean(py$X$Age)
ds <- sd(py$X$Age)
n <- length(py$X$Age)
error <- qnorm(0.975)*ds/sqrt(n)
izq <- media-error
der <- media+error

print(paste("Límite inferior del intervalo de confianza 97.5%:  ",izq, sep=""))
print(paste("Límite superior del intervalo de confianza 97.5%:  ",der, sep=""))
```

Con una confianza del 97.5% se concluye que la hipotesis se rechaza. Un paciente que se encuentra en la categoria 11 o mayor no tiene un diagnostico de diabetes.

```{r}
# library(ggplot2)
# library(scales)

# # Define the parameters for the beta distribution
# alpha <- 5
# beta <- 2

# # Generate x values
# x <- seq(0, 1, length.out = 100)

# # Calculate the beta function
# beta_function <- dbeta(x, alpha, beta)

# # Create a data frame for plotting
# data <- data.frame(x = x, beta_function = beta_function)

# # Plot the beta function
# ggplot(data, aes(x = x, y = beta_function)) +
#     geom_line() +
#     labs(x = "X", y = "Beta Function") +
#     scale_x_continuous(labels = percent_format()) +
#     ggtitle("Beta Function for py$X$Age")

```

```{python}
# from scipy.stats import beta

# # Define the parameters for the beta distribution
# alpha = 5
# Beta = 2

# # Apply beta to py$X$Age
# py_X_Age_beta = beta.pdf(X['Age'], alpha, Beta)
# sns.relplot(x = X['Age'], y = py_X_Age_beta)
# plt.show()
```